name: tests

on: push

jobs:
  # This runs foreman, end-to-end, and illumina tests.
  # These are grouped together because in total they take less time than our other tests individually.
  main_tests:
    runs-on: ubuntu-latest
    env:
      IMAGES: migrations api_local downloaders no_op foreman smasher
      DOCKER_BUILDKIT: 1
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - uses: actions/checkout@v2

      - name: Login to docker.pkg.github.com for cached docker images
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin

      - name: Pull cached docker images
        run: ./.github/workflows/pull_docker_images.sh

      - name: Start Postgres
        run: ./scripts/run_postgres.sh

      - name: Start Elasticsearch
        run: ./scripts/run_es.sh

      - name: Pause for initialization
        run: sleep 30

      - name: Install the database
        run: ./scripts/install_db_docker.sh

      - name: Update the models
        run: |
          chmod -R a+wr common
          ./scripts/update_models.sh

      - name: Rebuild the Elasticsearch index
        run: ./scripts/rebuild_es_index.sh

      - name: Install Nomad
        run: |
          sudo ./.circleci/fix_ca_certs.sh
          sudo ./scripts/install_nomad.sh

      - name: Start Nomad
        run: sudo -E ./scripts/run_nomad.sh -e test

      - name: Prepare docker images for end-to-end tests
        run: |
          ./scripts/prepare_image.sh -i no_op -s workers
          docker tag ccdlstaging/dr_no_op localhost:5000/dr_no_op
          docker push localhost:5000/dr_no_op
          ./scripts/prepare_image.sh -i downloaders -s workers
          docker tag ccdlstaging/dr_downloaders localhost:5000/dr_downloaders
          docker push localhost:5000/dr_downloaders

      # Running these in the same job as the common tests is good
      # because their dockerfiles are very similar so a lot of the
      # build time is saved by only building those layers once.
      - name: Run downloader tests
        run: |
          .github/workflows/filter_tests.sh -t downloaders

      - name: Run foreman tests
        run: |
          mkdir -p test_volume
          chmod -R a+rw test_volume

          # The foreman includes the end-to-end tests, but some of these
          # require docker images which are not built in this
          # workflow. Therefore we exclude salmon, affymetrix, and
          # transcriptome and let those end-to-end tests get run in the
          # workflows that include building those images.
          ./foreman/run_tests.sh --exclude-tag=salmon --exclude-tag=transcriptome --exclude-tag=affymetrix
          .circleci/upload_test_coverage.sh foreman

      - name: Run NO_OP tests
        run: |
          .github/workflows/filter_tests.sh -t no_op

      # Run QN tests.
      - name: Run QN tests
        run: |
          .github/workflows/filter_tests.sh -t qn

      - name: Push built docker images
        run: ./.github/workflows/push_docker_images.sh

  common_smasher_tests:
    runs-on: ubuntu-latest
    env:
      IMAGES: migrations common_tests smasher compendia
      DOCKER_BUILDKIT: 1
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - uses: actions/checkout@v2

      - name: Login to docker.pkg.github.com for cached docker images
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin

      - name: Pull cached docker images
        run: ./.github/workflows/pull_docker_images.sh

      - name: Start Postgres
        run: ./scripts/run_postgres.sh

      - name: Start Elasticsearch
        run: ./scripts/run_es.sh

      - name: Pause for initialization
        run: sleep 30

      - name: Install the database
        run: ./scripts/install_db_docker.sh

      - name: Update the models
        run: |
          chmod -R a+wr common
          ./scripts/update_models.sh

      - name: Rebuild the Elasticsearch index
        run: ./scripts/rebuild_es_index.sh

      - name: Run common tests
        run: |
          mkdir -p test_volume
          chmod -R a+rw test_volume
          sudo chown -R circleci:circleci test_volume
          ./common/run_tests.sh
          .circleci/upload_test_coverage.sh common

      - name: Prepare smasher image
        run: |
          ./scripts/prepare_image.sh -i smasher -s workers
          docker tag ccdlstaging/dr_smasher localhost:5000/dr_smasher
          docker push localhost:5000/dr_smasher

      - name: Run smasher tests
        run: |
          sudo chown -R circleci:circleci workers/test_volume/
          .github/workflows/filter_tests.sh -t smasher

      - name: Run janitor tests
        run: |
          sudo chown -R circleci:circleci workers/test_volume/
          .github/workflows/filter_tests.sh -t janitor

      # Run Compendia tests.
      - name: Run compendia tests
        run: |
          sudo chown -R circleci:circleci workers/test_volume/
          .github/workflows/filter_tests.sh -t compendia

      - name: Push built docker images
        run: ./.github/workflows/push_docker_images.sh

  syntax_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install build & test dependencies
        run: pip install pre-commit

      - name: Run pre-commit hooks on all files
        run: pre-commit run --all-files --show-diff-on-failure

  # This tests workers tests tagged as 'salmon'
  salmon_and_api_tests:
    runs-on: ubuntu-latest
    env:
      IMAGES: migrations salmon api_local downloaders transcriptome foreman
      DOCKER_BUILDKIT: 1
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - uses: actions/checkout@v2

      - name: Login to docker.pkg.github.com for cached docker images
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin

      - name: Pull cached docker images
        run: ./.github/workflows/pull_docker_images.sh

      - name: Start Postgres
        run: ./scripts/run_postgres.sh

      - name: Start Elasticsearch
        run: ./scripts/run_es.sh

      - name: Pause for initialization
        run: sleep 30

      - name: Install the database
        run: ./scripts/install_db_docker.sh

      - name: Update the models
        run: |
          chmod -R a+wr common
          ./scripts/update_models.sh

      - name: Rebuild the Elasticsearch index
        run: ./scripts/rebuild_es_index.sh

      - name: Run API tests
        run: |
          mkdir -p test_volume && chmod -R a+rw test_volume && sudo chown -R circleci:circleci test_volume
          ./api/run_tests.sh
          .circleci/upload_test_coverage.sh api

      - name: Run salmon tests
        run: .github/workflows/filter_tests.sh -t salmon

      - name: Install Nomad
        run: |
          sudo ./.circleci/fix_ca_certs.sh
          sudo ./scripts/install_nomad.sh

      - name: Start Nomad
        run: sudo -E ./scripts/run_nomad.sh -e test

      - name: Prepare docker images for end-to-end tests
        run: |
          ./scripts/prepare_image.sh -i downloaders -s workers
          docker tag ccdlstaging/dr_downloaders localhost:5000/dr_downloaders
          docker push localhost:5000/dr_downloaders
          ./scripts/prepare_image.sh -i transcriptome -s workers
          docker tag ccdlstaging/dr_no_op localhost:5000/dr_no_op
          docker push localhost:5000/dr_no_op
          ./scripts/prepare_image.sh -i salmon -s workers
          docker tag ccdlstaging/dr_salmon localhost:5000/dr_salmon
          docker push localhost:5000/dr_salmon

      - name: Run salmon end-to-end tests
        run: |
          mkdir -p test_volume
          chmod -R a+rw test_volume
          sudo chown -R circleci:circleci test_volume
          ./foreman/run_tests.sh --tag=salmon --tag=transcriptome
          .circleci/upload_test_coverage.sh foreman

      - name: Push built docker images
        run: ./.github/workflows/push_docker_images.sh

  tx_illumina_tests:
    runs-on: ubuntu-latest
    env:
      IMAGES: migrations illumina
      DOCKER_BUILDKIT: 1
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - uses: actions/checkout@v2

      - name: Login to docker.pkg.github.com for cached docker images
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin

      - name: Pull cached docker images
        run: ./.github/workflows/pull_docker_images.sh

      - name: Start Postgres
        run: ./scripts/run_postgres.sh

      - name: Start Elasticsearch
        run: ./scripts/run_es.sh

      - name: Pause for initialization
        run: sleep 30

      - name: Install the database
        run: ./scripts/install_db_docker.sh

      - name: Update the models
        run: |
          chmod -R a+wr common
          ./scripts/update_models.sh

      - name: Rebuild the Elasticsearch index
        run: ./scripts/rebuild_es_index.sh

      - name: Run Illumina tests
        run: |
          sudo chown -R circleci:circleci workers/test_volume/
          .github/workflows/filter_tests.sh -t illumina

      - name: Push built docker images
        run: ./.github/workflows/push_docker_images.sh

  affy_agilent_tests:
    runs-on: ubuntu-latest
    env:
      IMAGES: migrations affymetrix foreman
      DOCKER_BUILDKIT: 1
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - uses: actions/checkout@v2

      - name: Login to docker.pkg.github.com for cached docker images
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin

      - name: Pull cached docker images
        run: ./.github/workflows/pull_docker_images.sh

      - name: Start Postgres
        run: ./scripts/run_postgres.sh

      - name: Start Elasticsearch
        run: ./scripts/run_es.sh

      - name: Pause for initialization
        run: sleep 30

      - name: Install the database
        run: ./scripts/install_db_docker.sh

      - name: Update the models
        run: |
          chmod -R a+wr common
          ./scripts/update_models.sh

      - name: Rebuild the Elasticsearch index
        run: ./scripts/rebuild_es_index.sh

      - name: Run affymetrix tests
        run: |
          sudo chown -R circleci:circleci workers/test_volume/
          .github/workflows/filter_tests.sh -t affymetrix

      - name: Run agilent tests
        run: |
          sudo chown -R circleci:circleci workers/test_volume/
          .circleci/filter_tests.sh -t agilent

      - name: Install Nomad
        run: |
          sudo ./.circleci/fix_ca_certs.sh
          sudo ./scripts/install_nomad.sh

      - name: Start Nomad
        run: sudo -E ./scripts/run_nomad.sh -e test

      # The foreman includes the end-to-end tests. One of these
      # end-to-end tests is specific to affymetrix, so we run it here
      # since we have the image for it, but we also need the downloaders image.
      - name: Prepare images for the affymetrix end-to-end test
        run: |
          ./scripts/prepare_image.sh -i downloaders -s workers
          docker tag ccdlstaging/dr_downloaders localhost:5000/dr_downloaders
          docker push localhost:5000/dr_downloaders

          # This image was built by the affymetrix workers tests, just
          # gotta retag it so it can go into the local docker repo.
          docker tag ccdlstaging/dr_affymetrix:latest localhost:5000/dr_affymetrix:latest
          docker push localhost:5000/dr_affymetrix

      - name: Run affymetrix end-to-end test
        run: |
          mkdir -p test_volume && chmod -R a+rw test_volume && sudo chown -R circleci:circleci test_volume
          ./foreman/run_tests.sh --tag=affymetrix
          .circleci/upload_test_coverage.sh foreman

      - name: Push built docker images
        run: ./.github/workflows/push_docker_images.sh
